generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id          String   @id @default(uuid()) @db.Uuid
  id_folder   String?  @unique @db.Uuid
  id_rama     String?  @db.Uuid
  id_family   String?  @unique @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  username    String
  password    String
  email       String   @unique
  name        String
  last_name   String
  birthdate   DateTime
  citizenship String
  address     String
  phone       String
  gender      Gender
  dni         String
  is_granted  Boolean  @default(false)
  is_active   Boolean  @default(true)
  role        Role
  Family      Family?  @relation(fields: [id_family], references: [id])
  folder      Folder?  @relation(fields: [id_folder], references: [id])
  rama        Rama?    @relation(fields: [id_rama], references: [id])
  
}

model Rama {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  users     User[]
}

model Folder {
  id               String   @id @default(uuid()) @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  historia_clinica String?
  foto             String?
  user             User?
}

model Person {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  last_name String
  address   String
  phone     String
  email     String
  gender    Gender
  dni       String
}

model Family {
  id         String    @id @default(uuid()) @db.Uuid
  id_balance String    @unique @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  phone      String
  balance    Balance   @relation(fields: [id_balance], references: [id])
  payments   Payment[]
  users    User[]

}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  id_family      String        @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  amount         Float
  payment_method PaymentMethod
  payment_type   PaymentType
  Family         Family        @relation(fields: [id_family], references: [id])
}

model Balance {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  cuota_balance   Float
  cfa_balance     Float
  custom_balance  Float
  is_custom_cuota Boolean
  is_custom_cfa   Boolean
  family          Family?
}

model Cuota {
  id           String   @id @default(uuid()) @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cuota_amount Float
  cfa_amount   Float
  is_active    Boolean  @default(true)

}

enum PaymentType {
  CUOTA
  CFA
}

enum PaymentMethod {
  EFECTIVO
  TRANSFERENCIA
}

enum Gender {
  HOMBRE
  MUJER
}

enum Role {
  DIRIGENTE
  BENEFICIARIO
  MASTER
}
