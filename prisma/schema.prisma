// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid()) @db.Uuid
  id_folder String? @unique @db.Uuid
  id_rama   String? @db.Uuid
  id_person String? @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String
  password String
  role     Role

  folder Folder? @relation(fields: [id_folder], references: [id])
  person Person? @relation(fields: [id_person], references: [id])
  rama   Rama?   @relation(fields: [id_rama], references: [id])
}

model Rama {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  users User[]
}

model Folder {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  historia_clinica String?
  foto             String?

  user User?
}

model Person {
  id        String @id @default(uuid()) @db.Uuid
  id_family String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  last_name String
  address   String
  phone     String
  email     String
  gender    Gender
  dni       String

  user User?

  family Family? @relation(fields: [id_family], references: [id])
}

model Family {
  id         String @id @default(uuid()) @db.Uuid
  id_balance String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  phone    String
  persons  Person[]
  payments Payment[]

  balance Balance @relation(fields: [id_balance], references: [id])
}

model Payment {
  id        String @id @default(uuid()) @db.Uuid
  id_family String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Float

  payment_method PaymentMethod
  payment_type   PaymentType

  Family Family @relation(fields: [id_family], references: [id])
}

model Balance {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cuota_balance  Float
  cfa_balance    Float
  custom_balance Float

  is_custom_cuota Boolean
  is_custom_cfa   Boolean

  family Family?
}

model Cuota {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cuota_amount Float
  cfa_amount   Float
}

enum PaymentType {
  CUOTA
  CFA
}

enum PaymentMethod {
  EFECTIVO
  TRANSFERENCIA
}

enum Gender {
  HOMBRE
  MUJER
}

enum Role {
  DIRIGENTE
  BENEFICIARIO
  MASTER
}
