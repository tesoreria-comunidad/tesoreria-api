generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  id_folder   String?    @unique @db.Uuid
  id_rama     String?    @db.Uuid
  id_family   String?    @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  username    String
  password    String
  email       String?    @unique
  name        String
  last_name   String
  birthdate   DateTime?
  citizenship String?
  address     String?
  phone       String?
  gender      Gender?
  dni         String?
  is_granted  Boolean    @default(false)
  is_active   Boolean    @default(true)
  role        Role?      @default(BENEFICIARIO)
  family_role familyRole @default(ADMIN)
  family      Family?    @relation(fields: [id_family], references: [id])
  folder      Folder?    @relation(fields: [id_folder], references: [id])
  rama        Rama?      @relation(fields: [id_rama], references: [id])
}

model Rama {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  users     User[]
}

model Folder {
  id               String   @id @default(uuid()) @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  historia_clinica String?
  foto             String?
  user             User?
}

model Person {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  last_name String
  address   String
  phone     String
  email     String
  gender    Gender
  dni       String
}

model Family {
  id           String         @id @default(uuid()) @db.Uuid
  id_balance   String         @unique @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String
  phone        String?
  manage_by    String
  balance      Balance        @relation(fields: [id_balance], references: [id])
  payments     Payment[]
  transactions Transactions[]
  users        User[]
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  id_family      String        @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  amount         Float
  payment_method PaymentMethod
  payment_type   PaymentType
  family         Family        @relation(fields: [id_family], references: [id])
}

model Balance {
  id                String   @id @default(uuid()) @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  value             Float
  custom_cuota      Float
  cfa_balance_value Float
  custom_cfa_value  Float
  is_custom_cuota   Boolean
  is_custom_cfa     Boolean
  previousValue     Float?
  family            Family?
}

model Cuota {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Float
  is_active Boolean  @default(true)
}

model CuotaPorHermanos {
  id        String   @id @default(uuid())
  cantidad  Int
  valor     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cfa {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Float
  value_A1  Float
  is_active Boolean  @default(true)
}

model Transactions {
  id             String               @id @default(uuid()) @db.Uuid
  id_family      String?              @db.Uuid
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  payment_date   DateTime             @default(now())
  amount         Float
  concept        String?
  description    String?
  category       String
  direction      TransactionDirection
  payment_method PaymentMethod
  attachment     String?
  family         Family?              @relation(fields: [id_family], references: [id])
}

model ActionLog {
  id             String             @id @default(uuid()) @db.Uuid
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  action_type    ActionType
  id_user        String
  target_id      String?
  id_family      String?
  id_transaction String?
  status         ActionStatus?
  message        String?
  requestId      String?            @unique
  ip             String?
  userAgent      String?
  metadata       Json?
  target_table   ActionTargetTable?

  @@index([action_type, createdAt(sort: Desc)])
  @@index([target_table, target_id])
}

enum ActionType {
  BALANCE_UPDATE
  TRANSACTION_CREATE
  TRANSACTION_UPDATE
  TRANSACTION_DELETE
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  PERSON_CREATE
  PERSON_UPDATE
  PERSON_DELETE
  PAYMENT_CREATE
  PAYMENT_UPDATE
  PAYMENT_DELETE
  FAMILY_CREATE
  FAMILY_UPDATE
  FAMILY_DELETE
  CUOTA_CREATE
  CUOTA_UPDATE
  CUOTA_DELETE
  FOLDER_CREATE
  FOLDER_UPDATE
  FOLDER_DELETE
}

enum ActionStatus {
  PENDING
  SUCCESS
  ERROR
}

enum ActionTargetTable {
  FAMILY
  TRANSACTIONS
  RAMA
  USER
  CUOTA
  CPH
  BALANCE
}

enum TransactionCategory {
  CUOTA
  CFA
}

enum TransactionDirection {
  INCOME
  EXPENSE
}

enum PaymentMethod {
  EFECTIVO
  TRANSFERENCIA
}

enum PaymentType {
  CUOTA
  CFA
}

enum Gender {
  HOMBRE
  MUJER
}

enum Role {
  DIRIGENTE
  BENEFICIARIO
  MASTER
  FAMILY
}

enum familyRole {
  ADMIN
  MEMBER
}
